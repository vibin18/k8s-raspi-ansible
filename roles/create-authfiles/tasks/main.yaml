- name: "Checking if k8s binaries are avialable || Create-Authfiles setup. "
  stat: path="{{ etcdctl.binpath }}"
  register: EVELYN

- name: "Trying to copy the binary from k8s binary location || Create-Authfiles setup. "
  copy:
    src: "{{ etcdctl.k8sbinpath }}"
    dest: "{{ etcdctl.binpath }}"
    owner: root
    group: root
    mode: u+rwx,g-wx,o-rwx
  when: EVELYN.stat.exists == False

- name: "Creating Auth Config directories || Create-Authfiles setup. "
  file:
    path: "{{ controllmgr.authfilepath }}"
    state: directory
    mode: 0755

- name: "Generate auth files for kube-controller-manager || Create-Authfiles setup. "
  shell: 'openssl genrsa -out {{ server.certpath }}/{{ server.keyfile }} 2048'
  args:
    creates: "{{ server.certpath }}/{{ server.keyfile }}"


- name: "Generate auth files for kube-controller-manager || Create-Authfiles setup. "
  shell: |
    kubectl config set-cluster test --certificate-authority="{{ server.certpath }}/{{ server.certfile }}" --embed-certs=true --server="{{ server.url }}" --kubeconfig="{{ controllmgr.authfilepath }}/{{ item.name }}.authfile"
    kubectl config set-credentials system:"{{ item.service }}" --client-certificate="{{ controllmgr.certpath }}/{{ item.name }}.crt" --client-key="{{ controllmgr.certpath }}/{{ item.name }}.pem" --embed-certs=true --kubeconfig="{{ controllmgr.authfilepath }}/{{ item.name }}.authfile"
    kubectl config set-context default --cluster=test --user=system:"{{ item.service }}" --kubeconfig="{{ controllmgr.authfilepath }}/{{ item.name }}.authfile"
  with_items:
    - { name: 'controllmgr', service: 'kube-controller-manager' }
    - { name: 'scheduler', service: 'kube-scheduler' }
